{"body":"<pre>\r\n                        _______                       _____   _____ _____  \r\n                       |__   __|                     |  __ \\ / ____|  __ \\ \r\n                          | | __ _ _ __ ___  ___  ___| |  | | (___ | |__) |\r\n                          | |/ _` | '__/ __|/ _ \\/ __| |  | |\\___ \\|  ___/ \r\n                          | | (_| | |  \\__ \\ (_) \\__ \\ |__| |____) | |     \r\n                          |_|\\__,_|_|  |___/\\___/|___/_____/|_____/|_|     \r\n                                                      \r\n--------------------------*************************************************--------------------------\r\n</pre>\r\n\r\nTarsosDSP is a collection of classes to do simple audio processing. It features an implementation of a percussion onset detector and three pitch detection algorithms: YIN, the Mcleod Pitch method and a \"Dynamic Wavelet Algorithm Pitch Tracking\" algorithm. Also included is a Goertzel DTMF(Dual tone multi frequency) decoding algorithm and a time stretch algorithm (WSOLA).\r\n \r\nIts aim is to provide a simple interface to some audio (signal) processing algorithms implemented in pure JAVA. Some \"TarsosDSP example applications\":http://tarsos.0110.be/tag/TarsosDSP are available. \r\n\r\nThe following example filters a band of frequencies of an input file @testFile@. It keeps the frequencies form @startFrequency@ to @stopFrequency@. \r\n\r\n<pre><code>AudioInputStream inputStream = AudioSystem.getAudioInputStream(testFile);\r\nAudioDispatcher dispatcher = new AudioDispatcher(inputStream,stepSize,overlap);\r\ndispatcher.addAudioProcessor(new LowPassFS(stopFrequency, 44100));\r\ndispatcher.addAudioProcessor(new HighPass(startFrequency, 44100));\r\ndispatcher.addAudioProcessor(new WaveformWriter(format, \"filtered.wav\"));\r\ndispatcher.run();\r\n</code></pre>\r\n\r\nh2. Quickly Getting Started with TarsosDSP\r\n\r\nHead over to the \"TarsosDSP release repository\":http://tarsos.0110.be/releases/TarsosDSP/ and download the latest \"TarsosDSP library\":http://tarsos.0110.be/releases/TarsosDSP/TarsosDSP-latest/TarsosDSP-latest.jar. To get up to speed quickly, check the \"TarsosDSP Example applications\":http://tarsos.0110.be/releases/TarsosDSP/TarsosDSP-latest/TarsosDSP-latest-Examples/ for inspiration and consult the \"API documentation\":http://tarsos.0110.be/releases/TarsosDSP/TarsosDSP-latest/TarsosDSP-latest-Documentation/. If you, for some reason, want to build from source, you need \"Apache Ant\":http://ant.apache.org/ and \"git\":http://git-scm.com/ installed on your system. The following commands fetch the source and build the library and example jars: \r\n<pre><code>git clone https://JorenSix@github.com/JorenSix/TarsosDSP.git\r\ncd TarsosDSP/build\r\nant tarsos_dsp_library #Builds the core TarsosDSP library\r\nant build_examples #Builds all the TarsosDSP examples\r\nant javadoc #Creates the documentation in TarsosDSP/doc\r\n</code></pre>\r\nWhen everything runs correctly you should be able to run all example applications and have the latest version of the TarsosDSP library for inclusion in your projects. Also the Javadoc documentation for the API should be available in TarsosDSP/doc. Drop me a line if you use TarsosDSP in your project. Always nice to hear how this software is used.\r\n \r\nh2. Source Code Organization and Examples of TarsosDSP \r\n\r\nThe source tree is divided in three directories: \r\n* @src@ contains the source files of the core DSP libraries. \r\n* @test@ contains unit tests for some of the DSP functionality.\r\n* @build@ contains ANT build files. Either to build Java documentation or runnable JAR-files for the example applications.  \r\n* @examples@ contains a couple of example applications with a Java Swing user interface:\r\n** \"SoundDetector\":http://tarsos.0110.be/artikels/lees/TarsosDSP%253A_a_small_JAVA_audio_processing_library show how you loudness calculations can be done. When input sound is over a defined limit an event is fired.\r\n** \"PitchDetector\":http://tarsos.0110.be/artikels/lees/TarsosDSP%253A_a_small_JAVA_audio_processing_library this demo application shows real-time pitch detection. When pitch is detected the hertz value is printed together with a probability.\r\n** \"PercussionDetector\":http://tarsos.0110.be/artikels/lees/TarsosDSP%253A_a_small_JAVA_audio_processing_library show the percussion (onset) dectection. Clapping your hands causes an event. This demo application also shows the influence of the two parameters on the algorithm.\r\n** \"UtterAsterisk\":http://tarsos.0110.be/artikels/lees/TarsosDSP_sample_application%253A_Utter_Asterisk a game with the goal to sing as close to a melody a possible. Technically it shows real-time pitch detection with YIN or MPM.\r\n** \"Spectrogram in Java\":http://tarsos.0110.be/artikels/lees/Spectrogram_in_Java_with_TarsosDSP shows a spectrogram and detected pitch, either live or from an audio file. It is interesting to see which frequencies are picked as fundamentals.\r\n** \"Goertzel DTMF(Dual tone multi frequency) decoding\":http://tarsos.0110.be/artikels/lees/Dual-Tone_Multi-Frequency_%2528DTMF%2529_Decoding_with_the_Goertzel_Algorithm_in_Java an implementation of the Goertzel Algorithm. A fancy user interface shows what goes on under the hood.\r\n** \"Audio Time Stretching - Implementation in Pure Java Using WSOLA\":http://tarsos.0110.be/artikels/lees/Audio_Time_Stretching_-_Implementation_in_Pure_Java_Using_WSOLA an implementation of a time stretching algorithm. WSOLA(Waveform Similarity Overlap Add) makes it possible to change the play back speed of audio without changing the pitch. The play back speed can be changed at any moment, even when there is audio playing.\r\n\r\n\r\nh2. Credits\r\n\r\n\"Tarsos\":http://tarsos.0110.be and \"TarsosDSP\":http://tarsos.0110.be/tag/TarsosDSP are developed at University College Ghent, Faculty of Music\r\n\"http://cons.hogent.be\":http://cons.hogent.be\r\n\r\nThe onset detector implementation is based on a \"VAMP plugin example\":http://vamp-plugins.org/code-doc/PercussionOnsetDetector_8cpp-source.html by __Chris Cannam__ at Queen Mary University, London. The method is described in \"Drum Source Separation using Percussive Feature Detection and Spectral Modulation\":http://eprints.nuim.ie/699/1/ELE-Bob9.pdf by Dan Barry, Derry Fitzgerald, Eugene Coyle and Bob Lawlor, ISSC 2005.\r\n\r\nFor the implementation of the YIN pitch tracking algorithm. Both the  \"the YIN paper\":http://recherche.ircam.fr/equipes/pcm/cheveign/ps/2002_JASA_YIN_proof.pdf and the \"aubio implementation\":http://aubio.org were used as a reference. __Matthias Mauch__ (of Queen Mary University, London) kindly provided the FastYin implementation which uses an FFT to calculate the difference function, it makes the algorithm up to 3 times faster.\r\n\r\nThe Average Magnitude Difference (AMDF) pitch estimation algorithm is implemented by __Eder Souza__ and adapted for TarsosDSP by myself.\r\n\r\nFor the MPM pitch tracking algorithm, the paper titled \"A Smarter Way To Find Pitch\":http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf by __Philip McLeod__ and __Geoff Wyvill__ was used. \r\n\r\nThe Dynamic Wavlet pitch estimation algorithm is described in \"Real-Time Time-Domain Pitch Tracking Using Wavelets\":http://online.physics.uiuc.edu/courses/phys193/NSF_REU_Reports/2005_reu/Real-Time_Time-Domain_Pitch_Tracking_Using_Wavelets.pdf by Eric Larson and Ross Maddox. The implementation within TarsosDSP is based on the implementation in the \"Dynamic Wavelet Algorithm Pitch Tracking library\":http://www.schmittmachine.com/dywapitchtrack.html by __Antoine Schmitt__, which is released under the MIT open source licence.\r\n\r\nThe audio time stretching algorithm is described in \"An Overlap-Add Technique Based on Waveform Similarity  (WSOLA) For Hight Quality Time-Scale Modifications of speech\":http://mir.cs.nthu.edu.tw/users/litbee/RelatedPaper/[WSOLA]An%20overlap-add%20technique%20based%20on%20waveform%20similarity%20(WSOLA)%20for%20high-quality%20time-scale%20modifications%20of%20speech.pdf by Werner Verhelst and Marc Roelands. As a reference implementation the WSOLA implementation by __Olli Parviainen__ in the \"SoundTouch - an open-source audio processing library\":http://www.surina.net/soundtouch/ was used.\r\n\r\nThe FFT implementation used within TarsosDSP is by __Piotr Wendykier__ and is included in his \"JTransforms library\":https://sites.google.com/site/piotrwendykier/software/jtransforms. JTransforms is the first, open source, multithreaded FFT library written in pure Java. \r\n\r\nh2. Changelog\r\n\r\n<dt>Version 1.0</dt><dd>2012-04-24</dd> First release which includes several pitch trackers and a time stretching algorithm, amongst other things. Downloads and javadoc API can be found at the \"TarsosDSP release directory\":http://tarsos.0110.be/releases/TarsosDSP/\r\n\r\n<dt>Version 1.1</dt><dd>2012-06-4</dd> \r\nChanged how the audio dispatcher stops. Added StopAudioProcessor.\r\nAdded FastYin implementation by Matthias Mauch\r\nAdded AMDF pitch estimator by Eder Souza\r\n\r\n<dt>Version 1.2</dt><dd>2012-08-21</dd> \r\nModified the interface of PitchDetector to return a more elaborate result structure with pitch, probability and a boolean \"is pitched\".\r\nAdded an implementation of an envelope follower or envelope detector.\r\n\r\n<dt>Version 1.3</dt><dd>2012-09-19</dd> \r\nTarsosDSP can do audio synthesis now. The first simple unit generators are included in the library.\r\nIt has a new audio feature extraction feature, implemented in the FeatureExtractor example. \r\nAdded ASCII-art to the source code (this is the main TarsosDSP 1.3 feature). \r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"TarsosDSP","tagline":"A set of audio signal processing algorithms in JAVA.","google":""}